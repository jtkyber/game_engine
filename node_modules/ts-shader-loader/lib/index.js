"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var promises_1 = require("fs/promises");
function parse(loader, source, context) {
    return __awaiter(this, void 0, void 0, function () {
        var importPattern, imports, match;
        return __generator(this, function (_a) {
            importPattern = /#include "([./\w_-]+)";/gi;
            imports = [];
            match = importPattern.exec(source);
            while (match != null) {
                imports.push({
                    key: match[1],
                    target: match[0],
                });
                match = importPattern.exec(source);
            }
            // Process all imports
            return [2 /*return*/, processImports(loader, source, context, imports)];
        });
    });
}
function processImports(loader, source, context, imports) {
    return __awaiter(this, void 0, void 0, function () {
        var imp, resolvedPath, parsedImport, _a, _b, newSource;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    imp = imports.pop();
                    if (imp === undefined) {
                        return [2 /*return*/, source];
                    }
                    return [4 /*yield*/, loader.getResolve()(context, imp.key)];
                case 1:
                    resolvedPath = _c.sent();
                    loader.addDependency(resolvedPath);
                    _a = parse;
                    _b = [loader];
                    return [4 /*yield*/, (0, promises_1.readFile)(resolvedPath, "utf-8")];
                case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c.sent(), (0, path_1.dirname)(resolvedPath)]))];
                case 3:
                    parsedImport = _c.sent();
                    newSource = source.replace(imp.target, parsedImport);
                    // Continue processing imports with the new source
                    return [2 /*return*/, processImports(loader, newSource, context, imports)];
            }
        });
    });
}
function default_1(source) {
    this.cacheable();
    var callback = this.async();
    parse(this, source, this.context)
        .then(function (sourceWithIncludes) {
        return "export default ".concat(JSON.stringify(sourceWithIncludes));
    })
        .then(function (sourceWithIncludes) { return callback(null, sourceWithIncludes); })
        .catch(function (err) { return callback(err); });
    return undefined;
}
exports.default = default_1;
